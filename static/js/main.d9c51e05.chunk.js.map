{"version":3,"sources":["components/CardElement.js","components/GameBoard.js","components/GameOver.js","game/game.js","MemoryGame.js","reportWebVitals.js","index.js"],"names":["CardElement","props","onClick","handleFlip","card","id","className","flipped","src","icon","alt","GameBoard","cards","map","index","GameOver","show","handleRestart","game","lockMode","firstCard","secondCard","techs","setCard","this","filter","console","log","checkMatch","clearCards","unflipCards","checkGameOver","length","createCardsFromTechs","forEach","tech","push","createPairFromTech","flatMap","pair","shuffleCards","createIdWithTech","parseInt","Math","random","currentIndex","randomIndex","floor","flipCard","cardId","gameOverCallBack","noMatchCallBack","setTimeout","MemoryGame","useState","gameOver","setGameOver","setCards","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9c51e05.chunk.js","sourcesContent":["import React from 'react'\n\n\n\nexport default function CardElement(props) {\n    return (\n        <div onClick={()=>{props.handleFlip(props.card)}} id={props.card.id} className={`card ${props.card.flipped?\"flip\":\"\"}`}>\n            <div className=\"card_front\">\n                <img className=\"icon\" \n                src={`assets/images/${props.card.icon}.png`}\n                alt={props.card.icon}></img>\n            </div>\n            <div className=\"card_back\">\n                {\"</>\"}\n            </div>\n            \n        </div>\n    )\n}\n","import React from 'react'\nimport CardElement from './CardElement'\n\nexport default function GameBoard(props) {\n    return (\n        <div id=\"gameBoard\">\n            {props.cards.map((card, index)=>\n                <CardElement handleFlip={props.handleFlip} key={index} card={card}></CardElement>\n            )}\n            \n        </div>\n    )\n}\n","import React, { Fragment } from 'react'\n\nexport default function GameOver(props) {\n    return (props.show?\n        <div id=\"gameOver\">\n        <div id=\"txtmgameOver\">\n            Parabéns, você completou o jogo!\n        </div>\n        <button id=\"restart\" onClick={props.handleRestart} >Jogue Novamente</button>\n\n    </div>: <Fragment/>       \n        \n    )\n}\n","let game = {\n\n    lockMode: false,\n    firstCard: null,\n    secondCard: null,\n\n    techs: ['bootstrap',\n        'css',\n        'electron',\n        'firebase',\n        'html',\n        'javascript',\n        'jquery',\n        'mongo',\n        'node',\n        'react'\n    ],\n    cards: null,\n    // segundos: 0,\n    // minutos: 0,\n    // firstMove: true,\n    // attempts: 0,\n\n    setCard: function (id) {\n        let card = this.cards.filter(card => card.id === id)[0];\n        console.log(card);\n        if (card.flipped || this.lockMode) {\n            return false;\n        }\n\n        if (!this.firstCard) {\n            this.firstCard = card;\n            this.firstCard.flipped = true;\n            return true;\n        } else {\n            this.secondCard = card;\n            this.secondCard.flipped = true;\n            this.lockMode = true;\n            return true;\n        }\n    },\n\n    checkMatch: function () {\n        // this.attempts++\n        // setattempts();\n        if (!this.firstCard || !this.secondCard) {\n            return false;\n        }\n        return this.firstCard.icon === this.secondCard.icon;\n    },\n\n    clearCards: function () {\n        this.firstCard = null;\n        this.secondCard = null;\n        this.lockMode = false;\n    },\n    unflipCards() {\n        this.firstCard.flipped = false;\n        this.secondCard.flipped = false;\n        this.clearCards();\n    },\n\n    checkGameOver() {\n\n        return this.cards.filter(card => !card.flipped).length === 0;\n    },\n\n    createCardsFromTechs: function () {\n        this.cards = [];\n\n        this.techs.forEach((tech) => {\n            this.cards.push(this.createPairFromTech(tech));\n        })\n\n        this.cards = this.cards.flatMap(pair => pair);\n        this.shuffleCards();\n        return this.cards;\n    },\n\n    createPairFromTech: function (tech) {\n        return [{\n            id: this.createIdWithTech(tech),\n            icon: tech,\n            flipped: false,\n        }, {\n            id: this.createIdWithTech(tech),\n            icon: tech,\n            flipped: false,\n        }]\n    },\n\n    createIdWithTech: function (tech) {\n        return tech + parseInt(Math.random() * 1000);\n    },\n\n    shuffleCards: function (cards) {\n        let currentIndex = this.cards.length;\n        let randomIndex = 0;\n\n        while (currentIndex !== 0) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            [this.cards[randomIndex], this.cards[currentIndex]] = [this.cards[currentIndex], this.cards[randomIndex]];\n        }\n    },\n    \n    flipCard: function(cardId, gameOverCallBack, noMatchCallBack){\n        if (this.setCard(cardId)) {            \n            if (this.secondCard) {\n                if (this.checkMatch()) {\n                    this.clearCards();\n                    if (this.checkGameOver()) {                       \n                       //Game Over\n                       gameOverCallBack()\n                       \n                    }\n                } else {\n                    setTimeout(() => {\n                        //No Match\n                        this.unflipCards();\n                        noMatchCallBack();\n                    }, 1000);\n    \n                };\n            }\n        }\n    }\n    // timer: function () {\n\n        // control = setInterval(() => {\n            // if (this.segundos < 60) {\n                // this.segundos++\n            // } else {\n                // this.minutos++;\n                // this.segundos = 0;\n            // }\n            // setClock();\n        // }, 1000);\n\n        // setClock();\n    // }\n\n}\n\nexport default game","import React, {useState, useEffect} from 'react'\nimport GameBoard from './components/GameBoard';\nimport GameOver from './components/GameOver'\nimport game from './game/game'\n\nexport default function MemoryGame(){\n\n    const [gameOver, setGameOver] = useState(true);\n    const [cards, setCards] = useState([])\n\n    useEffect(() =>{\n       setCards(game.createCardsFromTechs())\n    },[] )\n\n    function restart(){\n        game.clearCards()\n        setCards(game.createCardsFromTechs())\n        setGameOver(false)\n    }\n    \n    function handleFlip(card){        \n        game.flipCard(card.id, ()=>{\n            //GameOverCallback\n            setGameOver(true)\n        },()=>{\n            //NoMatchCallback\n            setCards([...game.cards])\n        })\n        setCards([...game.cards])\n    \n    }\n\n    return(\n        <div>\n            <GameBoard handleFlip={handleFlip} cards={cards}></GameBoard>\n            <GameOver show={gameOver} handleRestart={restart}></GameOver>\n        </div>)\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame from './MemoryGame';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MemoryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}